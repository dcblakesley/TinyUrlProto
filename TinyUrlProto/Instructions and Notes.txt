 - Demo with UnitTests
   * Tests.DemoTest.Demo();

The POC should support:

 - Creating and Deleting short URLs with associated long URLs.
   * TinyUrlService.CreateTinyUrl
   * TinyUrlService.DeleteTinyUrl

 - Getting the long URL from a short URL.
    * TinyUrlService.GetLongUrl

 - Getting statistics on the number of times a short URL has been "clicked" i.e. the number of times its long URL has been retrieved.
   * TinyUrlService.GetTinyUrlUsageCount

 - Entering a custom short URL or letting the app randomly generate one, while maintaining uniqueness of short URLs.


// Rules
// 8 characters
//      -> 36^8 possible combinations
//      -> 2.82x10^12
//      -> 2.82 trillion possibilities
//      -> Collisions are likely to happen

// Does some checking for a valid URL
//      - about.above.across.after.against.along => tinyurl.com/22m47eyb
//      - somelongurl.privacy.blah/asdkjfsa hghsa/sakf jsaijdfijasewijr iaewjrf/asidjfihihgkjh => tinyurl.com/3fuxwrd9
//      - hello.hello => tinyurl.com/4r2s8crb

// Multiple Users can generate codes for the same url.
//      - tinyurl.com/2jf9uhu2
//      - tinyurl.com/3fuxwrd9

//  - For a given user, new codes won't be generated for the same long url
//      - If a second user enters the same url, they will generate their own code that is different than the other Users' code

// Usage counts are only available to Customers, not anonymous users